/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreateDestinationArgs } from "./CreateDestinationArgs";
import { UpdateDestinationArgs } from "./UpdateDestinationArgs";
import { DeleteDestinationArgs } from "./DeleteDestinationArgs";
import { DestinationFindManyArgs } from "./DestinationFindManyArgs";
import { DestinationFindUniqueArgs } from "./DestinationFindUniqueArgs";
import { Destination } from "./Destination";
import { DrugFindManyArgs } from "../../drug/base/DrugFindManyArgs";
import { Drug } from "../../drug/base/Drug";
import { User } from "../../user/base/User";
import { Pacient } from "../../pacient/base/Pacient";
import { DestinationService } from "../destination.service";

@graphql.Resolver(() => Destination)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DestinationResolverBase {
  constructor(
    protected readonly service: DestinationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Destination",
    action: "read",
    possession: "any",
  })
  async _destinationsMeta(
    @graphql.Args() args: DestinationFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Destination])
  @nestAccessControl.UseRoles({
    resource: "Destination",
    action: "read",
    possession: "any",
  })
  async destinations(
    @graphql.Args() args: DestinationFindManyArgs
  ): Promise<Destination[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Destination, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Destination",
    action: "read",
    possession: "own",
  })
  async destination(
    @graphql.Args() args: DestinationFindUniqueArgs
  ): Promise<Destination | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Destination)
  @nestAccessControl.UseRoles({
    resource: "Destination",
    action: "create",
    possession: "any",
  })
  async createDestination(
    @graphql.Args() args: CreateDestinationArgs
  ): Promise<Destination> {
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        doctor: args.data.doctor
          ? {
              connect: args.data.doctor,
            }
          : undefined,

        pacient: args.data.pacient
          ? {
              connect: args.data.pacient,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Destination)
  @nestAccessControl.UseRoles({
    resource: "Destination",
    action: "update",
    possession: "any",
  })
  async updateDestination(
    @graphql.Args() args: UpdateDestinationArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Destination | null> {
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          doctor: args.data.doctor
            ? {
                connect: args.data.doctor,
              }
            : undefined,

          pacient: args.data.pacient
            ? {
                connect: args.data.pacient,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Destination)
  @nestAccessControl.UseRoles({
    resource: "Destination",
    action: "delete",
    possession: "any",
  })
  async deleteDestination(
    @graphql.Args() args: DeleteDestinationArgs
  ): Promise<Destination | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Drug])
  @nestAccessControl.UseRoles({
    resource: "Drug",
    action: "read",
    possession: "any",
  })
  async drugs(
    @graphql.Parent() parent: Destination,
    @graphql.Args() args: DrugFindManyArgs
  ): Promise<Drug[]> {
    const results = await this.service.findDrugs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async doctor(@graphql.Parent() parent: Destination): Promise<User | null> {
    const result = await this.service.getDoctor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Pacient, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Pacient",
    action: "read",
    possession: "any",
  })
  async pacient(
    @graphql.Parent() parent: Destination
  ): Promise<Pacient | null> {
    const result = await this.service.getPacient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
